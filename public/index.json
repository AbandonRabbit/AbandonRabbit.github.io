
[{"content":"hugo是基于 go 语言的静态网站生成器\n准备环境 # 安装 hugo 下载地址 安装 golang 环境 golang下载地址 安装 git 需要配置到环境变量里面\n验证方法 hugo version、go version 输出版本信息代表安装成功\n创建站点 # 如果环境已经配置好，那么接下来会非常容易，首先创建一个空的 Hugo 网站（没有任何主题），这条命令会在当前目录下创建一个名为MyName的文件夹，里面有 hugo 简单的配置\nhugo new site MyName 安装完之后运行下面的命令，并打开浏览器输入 https://localhost:1313 即可查看你的网站。\nemmmmm\u0026hellip;，好像404了，没关系，这是预期之内的，因为创建了一个空白的网站，Hugo 不会添加任何默认的页面——换句话说，你的网站还没有任何页面可以显示。\n下一步，让我门使用 git submodules 来安装 Blowfish。通过 git submodules 安装可以让以后管理和升级 Blowfish 主题更加方便。\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 如果这一步执行失败，那么还有备用方案，打开链接将压缩包下载到 MyName/themes 文件夹中，解压缩之后重命名为 blowfish\n在你的代码根目录下创建 config/_default/ 文件夹，然后下载这些文件，你的目录接下来看起来应该是这样的。\n换成中文显示 # 将根目录下的 themes\\blowfish\\exampleSite\\config_default\\languages.zh-cn.toml 和 themes\\blowfish\\exampleSite\\config_default\\menus.zh-cn.toml 复制到config/default 文件中，\n然后将扩展名为带有 en 的文件删除，\n再创建一个新的文件 config.md\n之后你的目录看起来应该是这样的。\nconfig/_default/ ├─ languages.zh-cn.toml ├─ markup.toml ├─ menus.zh-cn.toml └─ params.toml 接下来在 config.md 文件中加入以下代码\nhasCJKLanguage = true 接下来修改 MyName/hugo.toml 文件，添加一下代码，如果有相同的属性，则修改\ntheme = \u0026#34;blowfish\u0026#34; languageCode = \u0026#39;zh-cn\u0026#39; 目前为止你已经准备好了。再次尝试运行网站，并打开浏览器在 https://localhost:1313 查看效果。\nhugo server -D 配置主题 # 很好，如果显示成功，那么我们可以开始配置主题了\n仅供参考 本指南不会详细介绍 Blowfish 中的所有特性和参数——如果想要了解所有的功能特性和参数，以及如何使用它们，请参考Blowfish 文档。\nmenus.en.tom # 这个文件定义了你的顶部（banner）和底部（footer）的菜单结构。对于本指南，我们只使用菜单的这两部分：Posts 和 Tags。\nPosts - 用于展示网站中的所有内容条目的完整列表 Tags - 自动生成每篇文章的标签 为了实现这一点，请确保 menus.en.toml 文件中设置了以下参数。完成修改后，重新运行hugo server，你将会看到顶部菜单。\n[[main]] #头部 name = \u0026#34;Posts\u0026#34; #显示的名称 pageRef = \u0026#34;posts\u0026#34; #链接 weight = 10 #权重 ，用来控制第几个显示 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 30 [[footer]] #底部 name = \u0026#34;标签\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 10 pageRef 指向的是 contene 文件下的目录 需要保证下有一个 _index.md 文件。\nlanguages.zh-cn.tom # 这个文件配置了网站作者的详细信息。修改下面的内容来定义你自己的信息。\n[author] name = \u0026#34;名字在这\u0026#34; image = \u0026#34;profile.jpg\u0026#34; headline = \u0026#34;我是个好人\u0026#34; bio = \u0026#34;关于我的二三事\u0026#34; # 出现在每篇文章的作者卡片中 现在可以将一张你的个人图片添加到根目录的 assets 文件夹，并命名为 profile.jpg。 你可以修改这个文件名，确保文件名和上面个人信息中 image 的参数值对应就行。\n最后一步是配置你的链接——社交媒体、GitHub 等等。该文件包含了所有支持的链接选项，不过他们被注释掉了。你可以将你希望展示的个人链接的配置项接触注释，也可以替换他们的展示顺序。\nparams.toml# # 这个文件是 Blowfish 的配置文件。大部分的视觉选项或自定义的选项可以通过它进行配置，它涵盖了 Blowfish 主题的多个功能特性。 对于本指南，我决定使用 background 布局，你也可以查看Blowfish主题其他的主页布局；同时使用了 Neon 颜色方案，你可以查看完整的颜色方案列表或者创建自己的颜色方案。\n将 image.jpg 文件添加到 assets 文件夹，它将会作为网站的背景。你可以挑选自己喜欢的，当然也可以用本指南中使用的这张图。\n现在让我们打开 params.toml 并开始配置。在这里我只会关注需要修改的值，不要再没看文档的情况下，删除此文件的其余部分。\n首先让我们确保上面提到的正确的颜色方案，开启图片优化，并设置默认背景图片。\ncolorScheme = \u0026#34;neon\u0026#34; disableImageOptimization = false defaultBackgroundImage = \u0026#34;image.jpg\u0026#34; # used as default for background images 接下来，让我们配置首页。我们选择了 background 布局，配置首页图片和最近文章。此外，可以使用 card view 卡片展示的方式来展现最新文章。最后让我们配置头部固定。\n[homepage] layout = \u0026#34;background\u0026#34; # valid options: page, profile, hero, card, background, custom homepageImage = \u0026#34;image.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 6 showMoreLink = true showMoreLinkDest = \u0026#34;/posts/\u0026#34; cardView = true cardViewScreenWidth = false layoutBackgroundBlur = true # only used when layout equals background [header] layout = \u0026#34;fixed\u0026#34; 现在配置文章和列表页面的展示。下面是他们的配置。\n[article] showHero = true heroStyle = \u0026#34;background\u0026#34; showSummary = true showTableOfContents = true showRelatedContent = true relatedContentLimit = 3 [list] showCards = true groupByYear = false cardView = true 如果你再次运行hugo server，你会看到类似下面这张图的效果。\n在你的网站中添加内容# # 创建一个文件夹/content/posts，在这个文件夹下添加你的帖子或文章。这也是你在菜单所配置的所有文章的根目录。在这个文件夹内，让我们创建一个新目录并命名为 myfirstpost。在这个目录中创建一个index.md文件作为你的文章，同样也在这个目录中添加featured.jpg或featured.png作为文章的缩略图。 参考下面这个示例。文件中的前几行是扉页参数（Front Matter），它定义了 Hugo 如何展示文章，更多的参数可以参考这里。\n--- title: \u0026#34;我的第一篇帖子\u0026#34; date: 2023-08-14 draft: false summary: \u0026#34;这是网站的第一篇你帖子\u0026#34; tags: [\u0026#34;space\u0026#34;] --- ## 一个副标题 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nibh nisl, vulputate eu lacus vitae, maximus molestie libero. Vestibulum laoreet, odio et sollicitudin sollicitudin, quam ligula tempus urna, sed sagittis eros eros ac felis. In tristique tortor vitae lacinia commodo. Mauris venenatis ultrices purus nec fermentum. Nunc sit amet aliquet metus. Morbi nisl felis, gravida ac consequat vitae, blandit eu libero. Curabitur porta est in dui elementum porttitor. Maecenas fermentum, tortor ac feugiat fringilla, orci sem sagittis massa, a congue risus ipsum vel massa. Aliquam sit amet nunc vulputate, facilisis neque in, faucibus nisl. 你可以创建其他文章，来查看和验证站点的效果。你的网站应该像下面的图片一样。 主页显示最近的文章，每篇文章通过相关部分自动关联其他文章，有标签聚合和全文搜索。\n![img](imgs/blowfishrecent.png)![img](imgs/article.png)![img](imgs/search.png)![img](imgs/tag.png) 现在网站已经完成差不多了\n","date":"2025-05-08","externalUrl":null,"permalink":"/initblowfish/","section":"Ting's Space","summary":"","title":"Blowfish主题部署指南","type":"page"},{"content":"","date":"2025-05-08","externalUrl":null,"permalink":"/","section":"Ting's Space","summary":"","title":"Ting's Space","type":"page"},{"content":"","date":"2023-08-14","externalUrl":null,"permalink":"/categories/go/","section":"主题","summary":"","title":"Go","type":"categories"},{"content":"","date":"2023-08-14","externalUrl":null,"permalink":"/tags/space/","section":"标签","summary":"","title":"Space","type":"tags"},{"content":"","date":"2023-08-14","externalUrl":null,"permalink":"/tags/","section":"标签","summary":"","title":"标签","type":"tags"},{"content":" 一个副标题 # 站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇 站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇 站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇\n站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇\n","date":"2023-08-14","externalUrl":null,"permalink":"/posts/blog/mysecondpost/","section":"文档","summary":"这是网站的第二篇你帖子","title":"我的第二篇帖子","type":"posts"},{"content":" 一个副标题 # 站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇 站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇 站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇\n站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇站的第一篇\n","date":"2023-08-14","externalUrl":null,"permalink":"/posts/studybug/mythirdpost/","section":"文档","summary":"这是网站的第三篇你帖子","title":"我的第三篇帖子","type":"posts"},{"content":"","date":"2023-08-14","externalUrl":null,"permalink":"/categories/","section":"主题","summary":"","title":"主题","type":"categories"},{"content":"","date":"2022-08-14","externalUrl":null,"permalink":"/tags/go/","section":"标签","summary":"","title":"Go","type":"tags"},{"content":" 如有以下程序： # package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { input := []int{1, 2, 3, 4, 5} output := []int{} start := time.Now() for _, i := range input { result := processData(i) output = append(output, result) } fmt.Printf(\u0026#34;time cost : %v\\n\u0026#34;, time.Since(start)) fmt.Println(output) } func processData(val int) int { time.Sleep(1 * time.Second) return val * 2 } 以上程序耗时大约 5.0487571s\n尝试使用携程并加锁 # package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) func main() { input := []int{1, 2, 3, 4, 5} output := []int{} var wg sync.WaitGroup var mutex sync.Mutex start := time.Now() for _, i := range input { wg.Add(1) go func(val int) { defer wg.Done() mutex.Lock() result := processData(val) output = append(output, result) mutex.Unlock() }(i) } wg.Wait() fmt.Printf(\u0026#34;time cost : %v\\n\u0026#34;, time.Since(start)) fmt.Println(output) } func processData(val int) int { time.Sleep(1 * time.Second) return val * 2 } 执行耗时 5.0556264s\n可以看到比不适用携程反而更慢了\n第一种优化思路 # 观察程序发现 result := processData(val) 不算临界区资源，故可将协程代码修改如下\ngo func(val int) { defer wg.Done() result := processData(val) mutex.Lock() output = append(output, result) mutex.Unlock() }(i) 运行耗时 1.0095853s\n思路总结 # 只对共享资源加锁，如果用来保护其他的像一些比较耗时的操作就体现不了并发性，会变成一个瓶颈\n第二种优化思路 # 不使用共享资源\nfunc main() { input := []int{1, 2, 3, 4, 5} output := make([]int, len(input)) //[0,0,0,0,0] var wg sync.WaitGroup start := time.Now() for i, v := range input { wg.Add(1) go func(val int, p *int) { defer wg.Done() result := processData(val) *p = result }(v, \u0026amp;i) } wg.Wait() fmt.Printf(\u0026#34;time cost : %v\\n\u0026#34;, time.Since(start)) fmt.Println(output) } 运行耗时 1.0063716s\n思路总结 # 将共享资源进行分割，或者说给每个协程指定资源，使用指针确定每个协程访问的资源是那个 ，\n总结 # 在使用协程的时候，要注意临界资源和共享资源的使用，只对共享资源加锁，或者对共享资源进行划分，给每个进程指定可以访问的资源\n","date":"2022-08-14","externalUrl":null,"permalink":"/posts/blog/myfirstpost/","section":"文档","summary":"Go并发性能提升思路","title":"Go并发性能提升思路","type":"posts"},{"content":"一个从体育生转型为全栈开发者的技术实践者。2018年，我以散打特长生的身份开始大学生涯，却在一次程序设计选修课后发现了对代码的热爱。从中专的VB入门，到专科主攻C#开发，再到本科系统学习计算机科学，我用5年时间完成了从体育生到开发者的蜕变。\n技术之路上，我始终保持着运动员的拼搏精神。曾用2个月自学Go语言并成功入职开发岗位，参与游戏后台系统的研发；在蓝桥杯竞赛中获得省二等奖，证明了我的算法实力；开发的游戏后台管理系统将查询性能提升了40%。这些经历让我明白：优秀的开发者既要有扎实的技术功底，更要有解决问题的韧性。\n除了代码，我还保持着写作的热情。校级征文比赛的一等奖让我懂得如何清晰表达技术思想，现在每周都会撰写技术博客复盘工作心得。从散打到编程，从写作到开发，这些看似不相关的经历塑造了我独特的优势——既能专注解决技术难题。\nIn 2018, I began my university journey as a Sanda (Chinese kickboxing) athlete. However, a serendipitous elective course in programming sparked a deep passion for code. From learning VB in vocational school, focusing on C# development in my associate degree, to systematically studying computer science at the undergraduate level, I spent five years transforming myself from a sports student into a developer.\nOn this path, I’ve carried with me the perseverance and drive of an athlete. I self-taught Go in just two months and secured a developer position, contributing to backend development for gaming systems. I won second prize in a provincial round of the Lanqiao Cup, demonstrating my algorithmic skills. I also optimized a game backend management system, improving query performance by 40%. These experiences taught me that to be an outstanding developer, one must not only possess strong technical fundamentals, but also the tenacity to solve complex problems.\nBeyond coding, I have a deep love for writing. Winning first prize in a university essay contest taught me how to clearly articulate technical ideas. Today, I write weekly technical blogs to reflect on my work and growth. From martial arts to programming, from writing to development—these seemingly unrelated experiences have shaped my unique strength: the ability to focus deeply and solve tough technical challenges.\n","date":"2022-06-13","externalUrl":null,"permalink":"/about/","section":"Ting's Space","summary":"","title":"欢迎来到我的网站！我很高兴你的来访。","type":"page"},{"content":"","date":"2022-06-13","externalUrl":null,"permalink":"/posts/blog/","section":"文档","summary":"","title":"生活记录","type":"posts"},{"content":"","date":"2022-06-13","externalUrl":null,"permalink":"/posts/","section":"文档","summary":"","title":"文档","type":"posts"},{"content":"","date":"2022-06-13","externalUrl":null,"permalink":"/posts/studybug/","section":"文档","summary":"","title":"学习笔记","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]